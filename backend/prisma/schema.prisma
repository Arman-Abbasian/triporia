generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url= env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
enum Status {
  accepted
  rejected
  pending
}
model Place {
  id          Int       @id @default(autoincrement())
  name        String
  country     String
  city        String
  description String
  coverImage  String
  images      PlaceImage[]
  likes       Like[]
  bookmarks   Bookmark[]
  ratings     Rating[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

model PlaceImage {
  id        Int      @id @default(autoincrement())
  url       String
  place     Place    @relation(fields: [placeId], references: [id],onDelete: Cascade)
  placeId   Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  status    Status   @default(pending)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId    Int
  place     Place    @relation(fields: [placeId], references: [id],onDelete: Cascade)
  placeId   Int
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String?
  role      Role      @default(USER)
  isActive  Boolean
  likes     Like[]
  ratings   Rating[]
  comments  Comment[]
  bookmarks Bookmark[]
  activationToken  String?  @unique
  tokenExpiresAt   DateTime? 
  refreshToken String? // Nullable
  createdAt   DateTime  @default(now())
}

model Like {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId   Int
  place    Place  @relation(fields: [placeId], references: [id],onDelete: Cascade)
  placeId  Int

  @@unique([userId, placeId])
}

model Bookmark {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId   Int
  place    Place  @relation(fields: [placeId], references: [id],onDelete: Cascade)
  placeId  Int

  @@unique([userId, placeId])
}

model Rating {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId   Int
  place    Place  @relation(fields: [placeId], references: [id],onDelete: Cascade)
  placeId  Int
  score    Int

  @@unique([userId, placeId])
}